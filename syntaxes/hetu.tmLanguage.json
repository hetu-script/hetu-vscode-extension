{
  "name": "HetuScript",
  "scopeName": "source.hetu",
  "patterns": [
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "statements": {
      "patterns": [
        {
          "include": "#declaration"
        },
        {
          "include": "#control-statement"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        },
        {
          "include": "#function-decl-block"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#function-declaration"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#variable-declaration"
        },
        {
          "include": "#import-declaration"
        }
      ]
    },
    "control-statement": {
      "patterns": [
        {
          "include": "#when-statement"
        },
        {
          "include": "#for-loop"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue)\\s+",
          "captures": {
            "1": {
              "name": "keyword.control.loop.hetu"
            }
          }
        },
        {
          "name": "keyword.control.loop.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.flow.hetu"
            }
          },
          "end": "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|final|enum|export|construct|get|set|fun|import|return|var)\\b))|//",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#if-statement"
        },
        {
          "name": "keyword.control.conditional.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "enum-declaration": {
      "name": "meta.enum.declaration.hetu",
      "begin": "(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.enum.hetu"
        },
        "2": {
          "name": "entity.name.type.enum.hetu"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.hetu"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.hetu"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
              "beginCaptures": {
                "0": {
                  "name": "variable.other.enummember.hetu"
                }
              },
              "end": "(?=,|\\}|$)",
              "patterns": [
                {
                  "include": "#variable-initializer"
                }
              ]
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "function-declaration": {
      "name": "meta.function.hetu",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexternal)\\s+)?(?:(\\bstatic)\\s+)?(fun|get|set|construct\\b)([_$[:alpha:]][_$[:alnum:]]*)*\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.hetu"
        },
        "2": {
          "name": "storage.modifier.hetu"
        },
        "3": {
          "name": "storage.type.function.hetu"
        },
        "4": {
          "name": "meta.definition.function.hetu entity.name.function.hetu"
        }
      },
      "end": "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|class|final|enum|export|construct|get|set|fun|import|return|var)\\b))|(?<=\\})",
      "patterns": [
        {
          "include": "#function-name"
        },
        {
          "include": "#type-parameters"
        },
        {
          "name": "meta.parameters.hetu",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.hetu"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.hetu"
            }
          },
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "include": "#function-return-type"
        },
        {
          "include": "#function-decl-block"
        }
      ]
    },
    "class-declaration": {
      "name": "meta.class.hetu",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexternal)\\s+)?(?:(\\babstract)\\s+)?(class|struct\\b)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.hetu"
        },
        "2": {
          "name": "storage.modifier.hetu"
        },
        "3": {
          "name": "storage.type.class.hetu"
        },
        "4": {
          "name": "entity.name.type.class.hetu"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#type-parameters"
        },
        {
          "include": "#class-extends"
        },
        {
          "include": "#class-implements"
        },
        {
          "include": "#class-with"
        },
        {
          "include": "#class-decl-block"
        }
      ]
    },
    "class-extends": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.hetu"
        }
      },
      "end": "(?=\\{)|(?=(\\bimplements)\\s+)|(?=(\\bwith)\\s+)",
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "include": "#type-parameters"
        }
      ]
    },
    "class-implements": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.hetu"
        }
      },
      "end": "(?=\\{)|(?=(\\bwith)\\s+)",
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "include": "#type-parameters"
        },
        {
          "begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.comma.hetu"
            }
          },
          "end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
          "patterns": [
            {
              "include": "#type-name"
            },
            {
              "include": "#type-parameters"
            }
          ]
        }
      ]
    },
    "class-with": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(with)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.hetu"
        }
      },
      "end": "(?=\\{)",
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "include": "#type-parameters"
        },
        {
          "begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.comma.hetu"
            }
          },
          "end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
          "patterns": [
            {
              "include": "#type-name"
            },
            {
              "include": "#type-parameters"
            }
          ]
        }
      ]
    },
    "class-decl-block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#function-declaration"
        },
        {
          "include": "#class-declaration"
        },
        {
          "include": "#variable-declaration"
        }
      ]
    },
    "variable-declaration": {
      "name": "meta.var.expr.hetu",
      "begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexternal)\\s+)?(?:(\\bstatic)\\s+)?(var|final\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
      "end": "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexternal)\\s+)?(?:(\\bstatic)\\s+)?\\b(var|final)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+)|in|of|;|^\\s*$|(?:^\\s*(?:abstract|async|class|final|enum|export|construct|get|set|fun|import|return|var)\\b))|((?<!^[^\\._$[:alnum:]]^var|[^\\._$[:alnum:]]var)(?=\\s*$)))",
      "patterns": [
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexternal)\\s+)?(?:(\\bstatic)\\s+)?(var|final\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.hetu"
            },
            "2": {
              "name": "storage.modifier.hetu"
            },
            "3": {
              "name": "storage.type.hetu"
            }
          },
          "end": "(?=\\S)"
        },
        {
          "include": "#var-single-variable"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.comma.hetu"
            }
          },
          "end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
          "patterns": [
            {
              "include": "#var-single-variable"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "var-single-variable": {
      "name": "meta.var-single-variable.expr.hetu",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "meta.definition.variable.hetu variable.other.readwrite.hetu"
        },
        "2": {
          "name": "keyword.operator.definiteassignment.hetu"
        }
      },
      "end": "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
      "patterns": [
        {
          "include": "#type-annotation"
        }
      ]
    },
    "variable-initializer": {
      "patterns": [
        {
          "begin": "(?<!=|!)(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.hetu"
            }
          },
          "end": "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(in)\\s+))|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "import-declaration": {
      "name": "meta.import.hetu",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.hetu"
        },
        "2": {
          "name": "storage.modifier.hetu"
        },
        "3": {
          "name": "keyword.control.import.hetu"
        },
        "4": {
          "name": "keyword.control.type.hetu"
        }
      },
      "end": "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "begin": "(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*[\"'])",
          "end": "\\bfrom\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.from.hetu"
            }
          },
          "patterns": [
            {
              "include": "#import-export-declaration"
            }
          ]
        },
        {
          "include": "#import-export-declaration"
        }
      ]
    },
    "export-declaration": {
      "patterns": [
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "keyword.control.export.hetu"
            },
            "2": {
              "name": "keyword.control.as.hetu"
            },
            "3": {
              "name": "storage.type.namespace.hetu"
            },
            "4": {
              "name": "entity.name.type.module.hetu"
            }
          }
        },
        {
          "name": "meta.export.default.hetu",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.hetu"
            },
            "2": {
              "name": "keyword.control.type.hetu"
            },
            "3": {
              "name": "keyword.operator.assignment.hetu"
            },
            "4": {
              "name": "keyword.control.default.hetu"
            }
          },
          "end": "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|module|namespace|return|type|var)\\b))",
          "patterns": [
            {
              "include": "#interface-declaration"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.export.hetu",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|module|namespace|return|type|var)\\b)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.export.hetu"
            },
            "2": {
              "name": "keyword.control.type.hetu"
            }
          },
          "end": "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|module|namespace|return|type|var)\\b))",
          "patterns": [
            {
              "include": "#import-export-declaration"
            }
          ]
        }
      ]
    },
    "import-export-declaration": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#import-export-block"
        },
        {
          "name": "keyword.control.from.hetu",
          "match": "\\bfrom\\b"
        },
        {
          "include": "#import-export-clause"
        }
      ]
    },
    "import-export-block": {
      "name": "meta.block.hetu",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "patterns": [
        {
          "include": "#import-export-clause"
        }
      ]
    },
    "import-export-clause": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\s+(as)\\s+(?:([_$[:alpha:]][_$[:alnum:]]*))",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.hetu"
            },
            "2": {
              "name": "keyword.control.as.hetu"
            },
            "3": {
              "name": "variable.other.readwrite.alias.hetu"
            }
          }
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.alias.hetu"
            }
          }
        }
      ]
    },
    "import-as": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(as)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.hetu"
        }
      },
      "end": "(?=(\\bshow)\\s+)|(?=;|^\\s*$|(?:^\\s*(?:as|abstract|async|class|final|enum|export|construct|get|set|fun|import|return|var)\\b))|(?<=\\})",
      "patterns": [
        {
          "include": "#type-name"
        },
        {
          "begin": "(,)\\s*((?!\\S)|(?=\\/\\/))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.comma.hetu"
            }
          },
          "end": "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
          "patterns": [
            {
              "include": "#type-name"
            }
          ]
        }
      ]
    },
    "if-statement": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))",
      "end": "(?=;|$|\\})",
      "patterns": [
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.hetu"
            },
            "2": {
              "name": "meta.brace.round.hetu"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.hetu"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#statements"
        }
      ]
    },
    "for-loop": {
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.loop.hetu"
        }
      },
      "end": "(?<=\\))",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.hetu"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.hetu"
            }
          },
          "patterns": [
            {
              "include": "#variable-declaration"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#punctuation-semicolon"
            }
          ]
        }
      ]
    },
    "when-statement": {
      "name": "switch-statement.expr.hetu",
      "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bwhen\\s*\\()",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "switch-expression.expr.hetu",
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(when)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.switch.hetu"
            },
            "2": {
              "name": "meta.brace.round.hetu"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.hetu"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "switch-block.expr.hetu",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.hetu"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "name": "case-clause.expr.hetu",
              "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.switch.hetu"
                }
              },
              "end": "(?=:)",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "include": "#expression"
            },
            {
              "begin": "(:)\\s*(\\{)",
              "beginCaptures": {
                "1": {
                  "name": "case-clause.expr.hetu punctuation.definition.section.case-statement.hetu"
                },
                "2": {
                  "name": "meta.block.hetu punctuation.definition.block.hetu"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "meta.block.hetu punctuation.definition.block.hetu"
                }
              },
              "contentName": "meta.block.hetu",
              "patterns": [
                {
                  "include": "#statements"
                }
              ]
            },
            {
              "match": "(:)",
              "captures": {
                "0": {
                  "name": "case-clause.expr.hetu punctuation.definition.section.case-statement.hetu"
                }
              }
            }
          ]
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#paren-expression"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#identifiers"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#object-literal"
        },
        {
          "include": "#this-literal"
        },
        {
          "include": "#super-literal"
        },
        {
          "include": "#string"
        }
      ]
    },
    "array-literal": {
      "name": "meta.array.literal.hetu",
      "begin": "\\s*(\\[)",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.square.hetu"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.hetu"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "object-literal": {
      "name": "meta.objectliteral.hetu",
      "begin": "(?<!\\)\\s*)\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "patterns": [
        {
          "include": "#object-member"
        }
      ]
    },
    "object-member": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#object-literal-method-declaration"
        },
        {
          "name": "meta.object.member.hetu meta.object-literal.key.hetu",
          "begin": "(?=[\\'\\\"\\`])",
          "end": "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as)\\s+))))",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#string"
            }
          ]
        },
        {
          "name": "meta.object.member.hetu",
          "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.hetu"
            }
          }
        },
        {
          "name": "meta.object.member.hetu",
          "begin": "\\.\\.\\.",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.spread.hetu"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.object.member.hetu",
          "begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
          "end": "(?=,|\\}|$|\\/\\/|\\/\\*)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "ternary-expression": {
      "begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.ternary.hetu"
        }
      },
      "end": "\\s*(:)",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.ternary.hetu"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "finalant.numeric.hex.hetu",
          "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.bigint.hetu"
            }
          }
        },
        {
          "match": "\\b[0-9]+(\\.)*[0-9]*(n)?\\b",
          "captures": {
            "0": {
              "name": "finalant.numeric.decimal.hetu"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.hetu"
            }
          }
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "finalant.language.boolean.true.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "finalant.language.boolean.false.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        }
      ]
    },
    "null-literal": {
      "name": "finalant.language.null.hetu",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "this-literal": {
      "name": "variable.language.this.hetu",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)"
    },
    "super-literal": {
      "name": "variable.language.super.hetu",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)"
    },
    "string": {
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        }
      ]
    },
    "qstring-double": {
      "name": "string.quoted.double.hetu",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.hetu"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.hetu"
        },
        "2": {
          "name": "invalid.illegal.newline.hetu"
        }
      },
      "patterns": [
        {
          "include": "#string-interpolation"
        },
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "qstring-single": {
      "name": "string.quoted.single.hetu",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.hetu"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.hetu"
        },
        "2": {
          "name": "invalid.illegal.newline.hetu"
        }
      },
      "patterns": [
        {
          "include": "#string-interpolation"
        },
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-interpolation": {
      "begin": "\\${",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.hetu"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.hetu"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "string-character-escape": {
      "name": "finalant.character.escape.hetu",
      "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "identifiers": {
      "patterns": [
        {
          "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.hetu"
            },
            "2": {
              "name": "punctuation.accessor.optional.hetu"
            },
            "3": {
              "name": "variable.other.property.hetu"
            }
          }
        },
        {
          "include": "#class-name"
        },
        {
          "include": "#var-name"
        }
      ]
    },
    "class-name": {
      "patterns": [
        {
          "name": "entity.name.type.class.hetu",
          "match": "[[:upper:]+][_$[:alnum:]]*"
        }
      ]
    },
    "var-name": {
      "patterns": [
        {
          "name": "variable.other.readwrite.hetu",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "function-name": {
      "patterns": [
        {
          "name": "entity.name.function.hetu",
          "match": "[_$[:lower:]][_$[:alnum:]]*"
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "keyword.operator.rest.hetu",
          "match": "\\.\\.\\."
        },
        {
          "include": "#parameter-name"
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.hetu",
          "match": ","
        }
      ]
    },
    "function-return-type": {
      "patterns": [
        {
          "name": "meta.return.type.hetu",
          "begin": "(->)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.hetu"
            }
          },
          "end": "(?<![:|&])(?=$|^|[{};,]|//)",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "function-decl-block": {
      "name": "meta.block.hetu",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.hetu"
        }
      },
      "patterns": [
        {
          "include": "#statements"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.hetu",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.hetu",
      "match": ";"
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.hetu",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.hetu"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.hetu"
            }
          }
        },
        {
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "comment.line.double-slash.hetu"
            }
          },
          "end": "(?=$)",
          "contentName": "comment.line.double-slash.hetu"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#type-primitive"
        },
        {
          "include": "#type-builtin-literals"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "type-primitive": {
      "name": "support.type.primitive.hetu",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(str|num|bool|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "type-builtin-literals": {
      "name": "support.type.builtin.hetu",
      "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|super|true|false|null)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
    },
    "type-name": {
      "patterns": [
        {
          "name": "entity.name.type.hetu",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "type-parameters": {
      "name": "meta.type.parameters.hetu",
      "begin": "(<)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.typeparameters.begin.hetu"
        }
      },
      "end": "(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.typeparameters.end.hetu"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "storage.modifier.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type-annotation": {
      "patterns": [
        {
          "name": "meta.type.annotation.hetu",
          "begin": "(:)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.type.annotation.hetu"
            }
          },
          "end": "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.operator.expression.await.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "keyword.operator.expression.delete.hetu",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(delete)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.expression.as.hetu"
            }
          },
          "end": "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+)|(\\s+\\<))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "include": "#in-of-expression"
        },
        {
          "begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(is)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.expression.is.hetu"
            }
          },
          "end": "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(is)\\s+)|(\\s+\\<))",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.hetu"
            }
          },
          "end": "\\s*(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.hetu"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "keyword.operator.spread.hetu",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.assignment.compound.hetu",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.hetu",
          "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.hetu",
          "match": "<<|>>>|>>"
        },
        {
          "name": "keyword.operator.comparison.hetu",
          "match": "==|!="
        },
        {
          "name": "keyword.operator.relational.hetu",
          "match": "<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.hetu",
          "match": "\\!|&&|\\|\\||\\?\\?"
        },
        {
          "name": "keyword.operator.bitwise.hetu",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.hetu",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.hetu",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.hetu",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.hetu",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.hetu"
            },
            "2": {
              "name": "punctuation.accessor.optional.hetu"
            }
          }
        }
      ]
    },
    "in-of-expression": {
      "patterns": [
        {
          "name": "keyword.operator.expression.in.hetu",
          "match": "(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
        },
        {
          "name": "keyword.operator.expression.of.hetu",
          "match": "(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()"
        }
      ]
    },
    "paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.hetu"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.hetu"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "function-call": {
      "begin": "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
      "end": "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
      "patterns": [
        {
          "name": "meta.function-call.hetu",
          "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
          "end": "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*((([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
          "patterns": [
            {
              "include": "#function-call-target"
            }
          ]
        },
        {
          "include": "#type-arguments"
        },
        {
          "include": "#paren-expression"
        }
      ]
    },
    "function-call-target": {
      "patterns": [
        {
          "include": "#class-name"
        },
        {
          "include": "#function-name"
        }
      ]
    }
  }
}
